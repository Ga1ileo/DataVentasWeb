@page "/"
@page "/game"

@inject HttpClient Http

@inject IToastService toast
@attribute [Authorize]

@using DataVentasWeb.BLL
@using DataVentasWeb.Models
@using System.Timers

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>


<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";
            <div class="col-3">
                <button @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                        type="button"
                        class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
</div>

<div class="row">
    <div class="col">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="col">
        <h2>Time: @timeDisplay</h2>
    </div>
    <div class="col">
        <h2>Your Time was: @tiempo</h2>
    </div>
</div>

<br />
<br />

<EditForm Model="jugador" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col">
            <input type="text" @bind="jugador.nombre" class="form-control" placeholder="username">
            <ValidationMessage For="@(() => jugador.nombre)"></ValidationMessage>
        </div>
        <div class="col">
            <textarea id="mensaje" class="form-control" @bind="jugador.Mensaje" placeholder="type message for the chat" rows="1"></textarea>
            <ValidationMessage For="@(() => jugador.Mensaje)"></ValidationMessage>
        </div>
        <div class="col">
            <button type="button" @onclick="Guardar" class="form-control btn btn-warning">send play to board and message to chat</button>
        </div>

    </div>
</EditForm>




@code{

    [Inject]
    public JugadoresBLL JugadoresBLL { get; set; }
    public Jugadores jugador { get; set; } = new Jugadores();

    async Task Guardar()
    {
        
            await Http.PostAsJsonAsync("https://jugadorgalileo.azurewebsites.net/api/jugadores", jugador);
   
    }


    List<string> animalEmoji = new List<string>()
    {
        "🐶","🐶",
        "🐺","🐺",
        "🐮","🐮",
        "🦊","🦊",
        "🐱","🐱",
        "🦁","🦁",
        "🐯","🐯",
        "🐹","🐹",
        "🐝","🐝",
        "🐢","🐢",
    };


    List<string> shuffledAnimals = new List<string>();
    int matchesFound = 0;
    Timer timer;
    int tenthsOfSecoundsElapsed = 0;
    string timeDisplay;
    string nombre = string.Empty;
    string tiempo;


    protected override void OnInitialized()
    {

        timer = new Timer(100);
        timer.Elapsed += Timer_Trick;
        tiempo = string.Empty;
        SetupGame();
    }

    private void SetupGame()
    {
        Random random = new Random();
        shuffledAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        matchesFound = 0;
        tenthsOfSecoundsElapsed = 0;
        jugador.puntuacion = timeDisplay;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    private void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            //First selection of the pair. Remenber it.
            lastAnimalFound = animal;
            lastDescription = animalDescription;
            timer.Start();
        }
        else if ((animalDescription != lastDescription) && (lastAnimalFound == animal))
        {
            //match found! reset for next pair.
            lastAnimalFound = string.Empty;

            //Replace found animals with empty string to hid then
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();
            matchesFound++;
            if (matchesFound == 10)
            {
                timer.Stop();
                timeDisplay += " ";
                tiempo = timeDisplay;
                SetupGame();
            }

        }
        else
        {
            //user selected a pair that dont match.
            //reset selection
            lastAnimalFound = string.Empty;
        }
    }

    private void Timer_Trick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecoundsElapsed++;
            timeDisplay = (tenthsOfSecoundsElapsed / 10F)
            .ToString("0.0s");
            StateHasChanged();
        });

        getTime(timeDisplay);
    }

    public void getTime(string t)
    {
        t = jugador.puntuacion;
    }

}




@*<h1>DataVentas!</h1>

    Hecho por Miguel Jose Gondres y Maria Isabel Alberto.

    <SurveyPrompt Title="How is Blazor working for you?" />*@

@* Informacion de Login

    app server -> https://localhost:5001

    Facebook
    identificador de app -> 210803120478302
    Clave Secreta de app -> 856b818b6a64b4828d499f27622a2890

    Google
    identificador de app -> 23448158938-5jkfenfgjg4cqasnoh2ms7afpgm1b0kh.apps.googleusercontent.com
    clase secreta de app -> 5tnJGwg0Ivm9iwA7bVOncDOA

    authorize google server -> app server -> https://localhost:5001/signin-google

    Maria
    Microsoft
    valor dde app -> _U13T_hxAY5_-2xYr62ukYN7q5.A~bIjvQ
    id de app -> 075e3f83-9f25-4b9f-a728-8f5263286036
    identificador de app -> ddffb57b-dd8b-4a68-8427-00aa1a4d947c
    clave secreta de app -> 075f6bd1-a234-4b3b-b48c-de6c762db83d
    app -> https://localhost:44308/signin-microsoft

    Miguel
    Microsoft
    Client Secret Value -> 6KkrZMOO6k~wY_v9BDWg6R51l_mgEU.5VX
    Client Secret ID -> 11878791-4ec8-48e7-b46c-7c2c7e37f9d0





    Correo -> admin@gmail.com
    Contraseña -> Admin123#

    Link Third party Login

    -> https://docs.microsoft.com/en-us/aspnet/core/security/authentication/social/?view=aspnetcore-5.0&tabs=visual-studio

    Link Real Email Confirmation

    -> https://docs.microsoft.com/en-us/aspnet/core/security/authentication/accconfirm?view=aspnetcore-5.0&tabs=visual-studio

*@


